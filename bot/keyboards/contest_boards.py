import random
from typing import Optional

from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from bot.utils.callbacks import Task1Answer, Task3Admin, Task6Answer, Task7Answer
from bot.utils.config import task1_config, task6_config, task7_config, complete_texts, absolut_task_text, pix_task_text


def inline_first_task_process(question_id: int, wrong_answer_id: Optional[int] = None,
                              correct_answer_id: Optional[int] = None):
    builder = InlineKeyboardBuilder()

    text = task1_config.end_text

    button_1_text = "‚úÖ –ê–Ω–¥—Ä–µ–π –ì–µ–π–º" if correct_answer_id == 1 \
        else "‚ùå –ê–Ω–¥—Ä–µ–π –ì–µ–π–º" if wrong_answer_id == 1 else "–ê–Ω–¥—Ä–µ–π –ì–µ–π–º"

    button_2_text = "‚úÖ –ü—ë—Ç—Ä –ö–∞–ø–∏—Ü–∞" if correct_answer_id == 2 \
        else "‚ùå –ü—ë—Ç—Ä –ö–∞–ø–∏—Ü–∞" if wrong_answer_id == 2 else "–ü—ë—Ç—Ä –ö–∞–ø–∏—Ü–∞"

    button_3_text = "‚úÖ –î–º–∏—Ç—Ä–∏–π –õ–∏–≤–∞–Ω–æ–≤" if correct_answer_id == 3 \
        else "‚ùå –î–º–∏—Ç—Ä–∏–π –õ–∏–≤–∞–Ω–æ–≤" if wrong_answer_id == 3 else "–î–º–∏—Ç—Ä–∏–π –õ–∏–≤–∞–Ω–æ–≤"

    button_4_text = "‚úÖ –ò–≥–æ—Ä—å –†—ã–±–∞–∫–æ–≤" if correct_answer_id == 4 \
        else "‚ùå –ò–≥–æ—Ä—å –†—ã–±–∞–∫–æ–≤" if wrong_answer_id == 4 else "–ò–≥–æ—Ä—å –†—ã–±–∞–∫–æ–≤"

    button1 = InlineKeyboardButton(text=button_1_text,
                                   callback_data=Task1Answer(question_id=question_id,
                                                             answer_id=1).pack())
    button2 = InlineKeyboardButton(text=button_2_text,
                                   callback_data=Task1Answer(question_id=question_id,
                                                             answer_id=2).pack())
    button3 = InlineKeyboardButton(text=button_3_text,
                                   callback_data=Task1Answer(question_id=question_id,
                                                             answer_id=3).pack())
    button4 = InlineKeyboardButton(text=button_4_text,
                                   callback_data=Task1Answer(question_id=question_id,
                                                             answer_id=4).pack())
    buttons = [button1, button2, button3, button4]
    random.shuffle(buttons)
    builder.add(*buttons)

    builder.adjust(1, repeat=True)

    return text, builder.as_markup()


def inline_third_task_admin_choose(chat_id: int):
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                   callback_data=Task3Admin(chat_id=chat_id,
                                            approved=True))

    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                   callback_data=Task3Admin(chat_id=chat_id,
                                            approved=False))

    return builder.as_markup()


def inline_third_task_admin_result(approved: bool):
    builder = InlineKeyboardBuilder()

    if approved:
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                       callback_data="inactive")
    else:
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                       callback_data="inactive")

    return builder.as_markup()


def inline_sixth_task_phys():
    builder = InlineKeyboardBuilder()

    text = task6_config.process_text
    builder.button(text="–ü–æ—â–∞–¥–∏—Ç–µ! –Ø ‚Äî –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π!",
                   callback_data="task6_hum")

    return text, builder.as_markup()


def inline_sixth_task_hum(answer_id: Optional[int] = None):
    builder = InlineKeyboardBuilder()

    text = """–û–∫, —Å–∂–∞–ª–∏–º—Å—è, –ª–æ–≤–∏ –∑–∞–¥–∞—á–∫—É –æ—Ç –ì—Ä–∏–≥–æ—Ä–∏—è –û—Å—Ç–µ—Ä–∞, –µ—ë —Ç–æ—á–Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å:
–ù–∞—É—Ç—Ä–æ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏ —Ñ–∏–∑–∏–∫–∞–º–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —É—á–µ–Ω—ã–π –ò—Å–∞–∞–∫ –ù—å—é—Ç–æ–Ω —Ç–∞–∫ –æ—Å–ª–∞–±–µ–ª, —á—Ç–æ –µ–≥–æ —Å–∏–ª–∞ —Å—Ç–∞–ª–∞ —Ä–∞–≤–Ω–∞ –≤—Å–µ–≥–æ –¥–≤—É–º –Ω—å—é—Ç–æ–Ω–∞–º. –°–º–æ–∂–µ—Ç –ª–∏ —É—Å—Ç–∞–ª—ã–π —É—á–µ–Ω—ã–π —É–¥–µ—Ä–∂–∞—Ç—å –≤ —Ä—É–∫–∞—Ö —Å—Ç–∞–∫–∞–Ω —Å –∫–µ—Ñ–∏—Ä–æ–º –º–∞—Å—Å–æ–π 200 –≥—Ä–∞–º–º?"""

    builder.button(text="‚úÖ –°–º–æ–∂–µ—Ç" if answer_id == 1 else "–°–º–æ–∂–µ—Ç",
                   callback_data=Task6Answer(answer_id=1))

    builder.button(text="‚ùå –ù–µ —Å–º–æ–∂–µ—Ç" if answer_id == 2 else "–ù–µ —Å–º–æ–∂–µ—Ç",
                   callback_data=Task6Answer(answer_id=2))

    builder.adjust(1, repeat=True)

    return text, builder.as_markup()


def inline_seventh_task_start():
    builder = InlineKeyboardBuilder()

    builder.button(text="PIX Robotics",
                   callback_data="pix_task")

    builder.button(text="¬´–ê–±—Å–æ–ª—é—Ç –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ¬ª",
                   callback_data="absolut_task")

    text = task7_config.process_text

    return text, builder.as_markup()


def inline_absolut_task():
    builder = InlineKeyboardBuilder()

    builder.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                   callback_data="task7_menu")

    text = absolut_task_text

    return text, builder.as_markup()


def inline_pix_task(answer_id: Optional[int] = None):
    builder = InlineKeyboardBuilder()

    builder.button(text="‚ùå 1Ô∏è‚É£" if answer_id == 1 else "1Ô∏è‚É£",
                   callback_data=Task7Answer(answer_id=1))
    builder.button(text="‚ùå 2Ô∏è‚É£" if answer_id == 2 else "2Ô∏è‚É£",
                   callback_data=Task7Answer(answer_id=2))
    builder.button(text="‚úÖ 3Ô∏è‚É£" if answer_id == 3 else "3Ô∏è‚É£",
                   callback_data=Task7Answer(answer_id=3))

    builder.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                   callback_data="task7_menu")

    builder.adjust(3, 1)

    text = pix_task_text

    return text, builder.as_markup()


def inline_get_prize_start():
    builder = InlineKeyboardBuilder()

    builder.button(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!",
                   callback_data="get_prize")

    text = complete_texts[2]

    return text, builder.as_markup()


def inline_prize_data(prize_data: dict):
    builder = InlineKeyboardBuilder()

    builder.button(text="–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏",
                   url=prize_data.get('company_url'))

    text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª—É—á–∏–ª {prize_data.get('name')} –æ—Ç {prize_data.get('company_name')}."

    return text, builder.as_markup()


def inline_lottery_start(check: Optional[bool] = None):
    builder = InlineKeyboardBuilder()
    if check:
        builder.button(text="‚úÖ –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –ª–æ—Ç–µ—Ä–µ–µ",
                       callback_data="inactive")
    else:
        builder.button(text="üé´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–µ",
                       callback_data="lottery_start")

    text = complete_texts[3]

    return text, builder.as_markup()
