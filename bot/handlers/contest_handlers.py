import asyncio
import os

from aiogram import Router, types, F
from aiogram.filters import StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from dotenv import load_dotenv

from bot.keyboards.contest_boards import inline_first_task_process, inline_third_task_admin_choose, \
    inline_lottery_start, inline_prize_data, inline_sixth_task_hum, inline_sixth_task_phys, \
    inline_third_task_admin_result, inline_seventh_task_start, inline_get_prize_start, inline_absolut_task, \
    inline_pix_task
from bot.utils.callbacks import Task1Answer, Task3Admin, Task6Answer, Task7Answer
from bot.utils.config import BASE_DIR
from bot.utils.filters import MTaskFilter, CTaskFilter, GotPrize
from bot.utils.requests import change_task_type, get_task_type, got_prize, set_prize, \
    participate_in_lottery, set_lottery_participation, get_prize
from bot.utils.states import User
from bot.utils.texts import task1_config, task2_config, task3_config, task4_config, task5_config, task6_config, \
    task7_config, complete_texts

load_dotenv()
router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(F.text.lower().contains("–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"),
                MTaskFilter(""),
                StateFilter(User.menu_active, User.info_active))
async def first_task_start_handler(message: types.Message, state: FSMContext):
    photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/start/code_sticker_example.jpeg"))

    await message.answer_photo(photo=photo,
                               caption=task1_config.start_text)
    await state.set_state(User.quest_active)

    await change_task_type(chat_id=message.chat.id,
                           task_type="start_task1")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task1"))
async def first_task_conditions_handler(message: types.Message):
    if "–±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task1_config.process_text)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/task1/pic_1.jpeg"))
        text, reply_markup = inline_first_task_process(question_id=1)

        await message.answer_photo(photo=photo,
                                   reply_markup=reply_markup)

        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task1")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.callback_query(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"), Task1Answer.filter(),
                       StateFilter(User.quest_active),
                       CTaskFilter("do_task1"))
async def callback_first_task_process_handler(callback: types.CallbackQuery, callback_data: Task1Answer):
    question_id = callback_data.question_id
    answer_id = callback_data.answer_id

    if question_id == answer_id and question_id < 4:
        photo = FSInputFile(os.path.join(BASE_DIR, f"bot/media/task1/pic_{question_id + 1}.jpeg"))

        _, reply_markup = inline_first_task_process(question_id=question_id,
                                                    correct_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)

        text, reply_markup = inline_first_task_process(question_id=question_id + 1)

        await asyncio.sleep(0.05)

        await callback.message.edit_media(media=types.InputMediaPhoto(media=photo),
                                          reply_markup=reply_markup)

    elif question_id == answer_id and question_id == 4:

        _, reply_markup = inline_first_task_process(question_id=question_id,
                                                    correct_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)

        # await callback.message.answer(text=task1_config.end_text)
        await callback.message.answer(text="–í—Å—ë –≤–µ—Ä–Ω–æ!")  # –ù–∞–¥–æ –ª–∏

        await callback.message.answer(text=task2_config.start_text)
        await change_task_type(chat_id=callback.message.chat.id,
                               task_type="start_task2")

    else:
        text, reply_markup = inline_first_task_process(question_id=question_id,
                                                       wrong_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task2"))
async def second_task_conditions_handler(message: types.Message):
    if "—Å–∫–æ—Ä–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task2_config.process_text,
                             parse_mode="HTML",
                             disable_web_page_preview=True)

        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task2")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task2"))
async def second_task_process_handler(message: types.Message):
    if "vert" in message.text.lower() and "dider" in message.text.lower():
        await message.answer(text=task2_config.end_text)

        # –°—Ç–∞—Ä—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task3_config.start_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="start_task3")

    else:
        await message.answer(text="–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ø—Ä–æ–≤–µ—Ä—å –æ–ø–µ—á–∞—Ç–∫–∏")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task3"))
async def third_task_conditions_handler(message: types.Message):
    if "–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task3_config.process_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task3")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ñ–æ—Ç–æ)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task3"), F.photo)
async def third_task_photo_process_handler(message: types.Message):
    file_id = message.photo[-1].file_id

    reply_markup = inline_third_task_admin_choose(chat_id=message.chat.id)

    await message.bot.send_photo(chat_id=os.getenv("MODERATOR_CHAT_ID"),
                                 photo=file_id,
                                 caption=f"@{message.from_user.username}",
                                 reply_markup=reply_markup)

    await message.answer(text="–ñ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–µ —Ñ–æ—Ç–æ)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task3"), ~F.photo)
async def third_task_not_photo_process_handler(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ üòû")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@router.callback_query(Task3Admin.filter())
async def callback_third_task_photo_process_handler(callback: types.CallbackQuery, callback_data: Task3Admin):
    chat_id = callback_data.chat_id
    approved = callback_data.approved

    reply_markup = inline_third_task_admin_result(approved=approved)

    await callback.message.edit_reply_markup(reply_markup=reply_markup)

    if approved:

        await callback.bot.send_message(chat_id=chat_id,
                                        text=task3_config.end_text)
        # –°—Ç–∞—Ä—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await callback.bot.send_message(chat_id=chat_id,
                                        text=task4_config.start_text)
        await change_task_type(chat_id=chat_id,
                               task_type="start_task4")
    else:
        await callback.bot.send_message(chat_id=chat_id,
                                        text="–§–æ—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task4"))
async def fourth_task_conditions_handler(message: types.Message):
    if "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task4_config.process_text)
        await message.answer(text="–ò —Å–ª–µ–¥–æ–º –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n–ì–¥–µ –±—ã–ª –õ–µ–≤ –õ–∞–Ω–¥–∞—É –≤–æ –≤—Ä–µ–º—è –µ–∂–æ–≤—â–∏–Ω—ã?")
        await message.answer(text="–ò —Å–∞–º–æ–µ –∑–∞–Ω—è—Ç–Ω–æ–µ: –Ω–∞ —ç—Ç–∏ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç. –í–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ")

        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task4")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task4"))
async def fourth_task_process_handler(message: types.Message):
    if "–æ–ø–∞–ª" in message.text.lower():
        await message.answer(text=task4_config.end_text)

        # –°—Ç–∞—Ä—Ç –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task5_config.start_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="start_task5")
    else:
        await message.answer(text="–î–∞–≤–∞–π –µ—â—ë –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task5"))
async def fifth_task_conditions_handler(message: types.Message):
    if "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—è—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task5_config.process_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task5")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task5"))
async def fifth_task_process_handler(message: types.Message):
    if message.text.lower() == "847":
        await message.answer(text=task5_config.end_text)

        # –°—Ç–∞—Ä—Ç —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task6_config.start_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="start_task6")
    else:
        await message.answer(
            text="–ö–∞–∂–µ—Ç—Å—è, –Ω—É–∂–Ω–∞ –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ (–º—ã –Ω–µ —É–∑–Ω–∞–µ–º, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º)")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ñ–∏–∑)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task6"))
async def sixth_task_phys_conditions_handler(message: types.Message):
    if "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–µ—Å—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/task6/pic_1.png"))
        text, reply_markup = inline_sixth_task_phys()
        await message.answer_photo(photo=photo,
                                   caption=text,
                                   reply_markup=reply_markup)

        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task6_phys")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–≥—É–º)
@router.callback_query(StateFilter(User.quest_active),
                       F.data == "task6_hum",
                       or_f(CTaskFilter("do_task6_phys"), CTaskFilter("do_task6_hum")))
async def callback_sixth_task_hum_conditions_handler(callback: types.CallbackQuery):
    await change_task_type(chat_id=callback.message.chat.id,
                           task_type="do_task6_hum")

    text, reply_markup = inline_sixth_task_hum()

    await callback.message.delete()

    await callback.message.answer(text=text,
                                  reply_markup=reply_markup)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ñ–∏–∑)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task6_phys"))
async def sixth_task_phys_process_handler(message: types.Message):
    if "4" in message.text.lower():
        await message.answer(text=task6_config.end_text)

        # –°—Ç–∞—Ä—Ç —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task7_config.start_text)
        await change_task_type(chat_id=message.chat.id,
                               task_type="start_task7")
    else:
        await message.answer(
            text="–ö–∞–∂–µ—Ç—Å—è, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–≥—É–º)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("do_task6_hum"),
                       Task6Answer.filter())
async def callback_sixth_task_phys_process_handler(callback: types.CallbackQuery, callback_data: Task6Answer):
    answer_id = callback_data.answer_id

    text, reply_markup = inline_sixth_task_hum(answer_id=answer_id)
    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    if answer_id == 1:
        await callback.message.answer(
            text='–°–º–æ–∂–µ—Ç, —Å–º–æ–∂–µ—Ç. –°–∏–ª–∞ –≤ 2 –Ω—å—é—Ç–æ–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—ã—Ö 204 –≥—Ä–∞–º–º–∞ –∫–µ—Ñ–∏—Ä–∞. '
                 '–ò–ª–∏ —Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º —Ä–∞—Å—Å–æ–ª–∞.')

        # –°—Ç–∞—Ä—Ç —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await callback.message.answer(text=task7_config.start_text)
        await change_task_type(chat_id=callback.message.chat.id,
                               task_type="start_task7")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task7"))
async def seventh_task_conditions_handler(message: types.Message):
    if "–ø—Ä–∞–∫—Ç–∏–∫" in message.text.lower() and "–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å" in message.text.lower():
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        text, reply_markup = inline_seventh_task_start()

        await message.answer(text=text,
                             reply_markup=reply_markup)

        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task7")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–µ–Ω—é —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("do_task7_absolut"),
                       F.data == "task7_menu")
async def callback_absolut_seventh_task_menu_handler(callback: types.CallbackQuery):
    text, reply_markup = inline_seventh_task_start()

    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    await change_task_type(chat_id=callback.message.chat.id,
                           task_type="do_task7")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–µ–Ω—é —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("do_task7_pix"),
                       F.data == "task7_menu")
async def callback_pix_seventh_task_menu_handler(callback: types.CallbackQuery):
    text, reply_markup = inline_seventh_task_start()

    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    await change_task_type(chat_id=callback.message.chat.id,
                           task_type="do_task7")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (absolut)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("do_task7"),
                       F.data == "absolut_task")
async def callback_seventh_task_absolut_conditions_handler(callback: types.CallbackQuery):
    text, reply_markup = inline_absolut_task()

    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    await change_task_type(chat_id=callback.message.chat.id,
                           task_type="do_task7_absolut")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (pix)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("do_task7"),
                       F.data == "pix_task")
async def callback_seventh_task_absolut_conditions_handler(callback: types.CallbackQuery):
    text, reply_markup = inline_pix_task()

    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    await change_task_type(chat_id=callback.message.chat.id,
                           task_type="do_task7_pix")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (absolut)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task7_absolut"))
async def seventh_task_absolut_process_handler(message: types.Message):
    if "37.5" in message.text or "37,5" in message.text:

        await message.answer(task7_config.end_text)

        await asyncio.sleep(1)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/certificate.jpg"))
        await message.answer_photo(photo=photo,
                                   caption=complete_texts[0],
                                   parse_mode="HTML",
                                   disable_web_page_preview=True)

        await asyncio.sleep(1)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/logos/company_3.jpg"))
        await message.answer_photo(photo=photo,
                                   caption=complete_texts[1],
                                   parse_mode="HTML",
                                   disable_web_page_preview=True)

        await asyncio.sleep(1)

        text, reply_markup = inline_get_prize_start()
        await message.answer(text=text,
                             reply_markup=reply_markup,
                             parse_mode="HTML",
                             disable_web_page_preview=True)

        await change_task_type(chat_id=message.chat.id,
                               task_type="complete")
    else:
        await message.answer(text="–î–∞–≤–∞–π –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –µ—â—ë —Ä–∞–∑")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–¥—å–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (pix)
@router.callback_query(Task7Answer.filter(),
                       StateFilter(User.quest_active),
                       CTaskFilter("do_task7_pix"))
async def callback_seventh_task_absolut_process_handler(callback: types.CallbackQuery, callback_data: Task7Answer):
    answer_id = callback_data.answer_id

    text, reply_markup = inline_pix_task(answer_id=answer_id)

    await callback.message.edit_text(text=text,
                                     reply_markup=reply_markup)

    if answer_id == 1:

        await callback.message.answer(text="–ü—Ä–æ—Ü–µ—Å—Å —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –∑–∞–π–º–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 2 –Ω–µ–¥–µ–ª—å.")

    elif answer_id == 2:

        await callback.message.answer(text="–ê—Å—Å–µ–º–±–ª–µ—Ä / –°–∏ - —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, "
                                           "–∞ –∏–∑—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ "
                                           "—Ä–µ—à–µ–Ω–∏—è –∑–∞–π–º—É—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ 2 –Ω–µ–¥–µ–ª—å.")

    elif answer_id == 3:

        await callback.message.answer(
            text="–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–æ–±–æ—Ç RPA ‚Äì —ç—Ç–æ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, "
                 "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –∑–∞–π–º–µ—Ç –æ—Ç 2 —á–∞—Å–æ–≤ –¥–æ 3 –¥–Ω–µ–π, –∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ "
                 "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å")

        await asyncio.sleep(1)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/certificate.jpg"))
        await callback.message.answer_photo(photo=photo,
                                            caption=complete_texts[0],
                                            parse_mode="HTML",
                                            disable_web_page_preview=True)

        await asyncio.sleep(1)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/logos/company_3.jpg"))
        await callback.message.answer_photo(photo=photo,
                                            caption=complete_texts[1],
                                            parse_mode="HTML",
                                            disable_web_page_preview=True)

        await asyncio.sleep(1)

        text, reply_markup = inline_get_prize_start()
        await callback.message.answer(text=text,
                                      reply_markup=reply_markup,
                                      parse_mode="HTML",
                                      disable_web_page_preview=True)

        await change_task_type(chat_id=callback.message.chat.id,
                               task_type="complete")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (–ø–µ—Ä–≤–∏—á–Ω–æ–µ)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("complete"),
                       ~GotPrize(),
                       F.data == "get_prize")
async def callback_get_prize_handler(callback: types.CallbackQuery):
    prize_data = await set_prize(chat_id=callback.message.chat.id)

    if prize_data:
        photo = FSInputFile(
            os.path.join(BASE_DIR, f"bot/media/partners/logos/company_{prize_data.get('company_id')}.jpg"))
        text, reply_markup = inline_prize_data(prize_data=prize_data)
        await callback.message.answer_photo(photo=photo,
                                            caption=text,
                                            reply_markup=reply_markup)
    else:
        await callback.message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–∞—Ä–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å üòî")

    text, reply_markup = inline_lottery_start()
    await callback.message.answer(text=text,
                                  reply_markup=reply_markup)

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("complete"),
                       GotPrize(),
                       F.data == "get_prize")
async def callback_used_get_prize_handler(callback: types.CallbackQuery):
    prize_data = await get_prize(chat_id=callback.message.chat.id)

    photo = FSInputFile(os.path.join(BASE_DIR, f"bot/media/partners/logos/company_{prize_data.get('company_id')}.jpg"))
    text, reply_markup = inline_prize_data(prize_data=prize_data)
    await callback.message.answer_photo(photo=photo,
                                        caption=text,
                                        reply_markup=reply_markup)

    if await participate_in_lottery(chat_id=callback.message.chat.id):
        text, reply_markup = inline_lottery_start(check=True)
        await callback.message.answer(text=text,
                                      reply_markup=reply_markup)
        await callback.message.answer(text=complete_texts[4])
    else:
        text, reply_markup = inline_lottery_start()
        await callback.message.answer(text=text,
                                      reply_markup=reply_markup)

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–µ—Ä–µ–∏ (–ø–µ—Ä–≤–∏—á–Ω–æ–µ)
@router.callback_query(StateFilter(User.quest_active),
                       CTaskFilter("complete"),
                       GotPrize(),
                       F.data == "lottery_start")
async def callback_lottery_prize_handler(callback: types.CallbackQuery):
    if not await participate_in_lottery(chat_id=callback.message.chat.id):
        await set_lottery_participation(chat_id=callback.message.chat.id)

    _, reply_markup = inline_lottery_start(check=True)
    await callback.message.edit_reply_markup(reply_markup=reply_markup)

    await callback.message.answer(text=complete_texts[4])

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –∑–∞–¥–∞–Ω–∏—é
@router.message(F.text.lower().contains("–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"),
                ~MTaskFilter(""),
                StateFilter(User.menu_active, User.info_active))
async def return_task_handler(message: types.Message, state: FSMContext):
    await state.set_state(User.quest_active)
    task_type = await get_task_type(chat_id=message.chat.id)

    if task_type == "start_task1":
        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/start/code_sticker_example.jpeg"))

        await message.answer_photo(photo=photo,
                                   caption=task1_config.start_text)


    elif task_type == "do_task1":
        await message.answer(text=task1_config.process_text)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/task1/pic_1.jpeg"))
        text, reply_markup = inline_first_task_process(question_id=1)

        await message.answer_photo(photo=photo,
                                   reply_markup=reply_markup)

    elif task_type == "start_task2":
        await message.answer(text=task2_config.start_text)

    elif task_type == "do_task2":
        await message.answer(text=task2_config.process_text,
                             parse_mode="HTML",
                             disable_web_page_preview=True)

    elif task_type == "start_task3":
        await message.answer(text=task3_config.start_text)

    elif task_type == "do_task3":
        await message.answer(text=task3_config.process_text)

    elif task_type == "start_task4":
        await message.answer(text=task4_config.start_text)

    elif task_type == "do_task4":
        await message.answer(text=task4_config.process_text)
        await message.answer(text="–ò —Å–ª–µ–¥–æ–º –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n–ì–¥–µ –±—ã–ª –õ–µ–≤ –õ–∞–Ω–¥–∞—É –≤–æ –≤—Ä–µ–º—è –µ–∂–æ–≤—â–∏–Ω—ã?")
        await message.answer(text="–ò —Å–∞–º–æ–µ –∑–∞–Ω—è—Ç–Ω–æ–µ: –Ω–∞ —ç—Ç–∏ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç.\n–í–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ")

    elif task_type == "start_task5":
        await message.answer(text=task5_config.start_text)

    elif task_type == "do_task5":
        await message.answer(text=task5_config.process_text)

    elif task_type == "start_task6":
        await message.answer(text=task6_config.start_text)

    elif task_type == "do_task6_phys":
        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/task6/pic_1.png"))
        text, reply_markup = inline_sixth_task_phys()
        await message.answer_photo(photo=photo,
                                   caption=text,
                                   reply_markup=reply_markup)
    elif task_type == "do_task6_hum":
        text, reply_markup = inline_sixth_task_hum()
        await message.answer(text=text,
                             reply_markup=reply_markup)

    elif task_type == "start_task7":
        await message.answer(text=task7_config.start_text)

    elif task_type == "do_task7":

        text, reply_markup = inline_seventh_task_start()

        await message.answer(text=text,
                             reply_markup=reply_markup)

    elif task_type in ('do_task7_absolut', 'do_task7_pix'):
        await change_task_type(chat_id=message.chat.id,
                               task_type="do_task7")

        text, reply_markup = inline_seventh_task_start()

        await message.answer(text=text,
                             reply_markup=reply_markup)

    elif task_type == "complete":
        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/certificate.jpg"))
        await message.answer_photo(photo=photo,
                                   caption=complete_texts[0],
                                   parse_mode="HTML",
                                   disable_web_page_preview=True)

        photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/logos/company_3.jpg"))
        await message.answer_photo(photo=photo,
                                   caption=complete_texts[1],
                                   parse_mode="HTML",
                                   disable_web_page_preview=True)

        if await got_prize(chat_id=message.chat.id):

            await message.answer(text=complete_texts[2],
                                 parse_mode="HTML",
                                 disable_web_page_preview=True)

            prize_data = await get_prize(chat_id=message.chat.id)

            photo = FSInputFile(
                os.path.join(BASE_DIR, f"bot/media/partners/logos/company_{prize_data.get('company_id')}.jpg"))
            text, reply_markup = inline_prize_data(prize_data=prize_data)
            await message.answer_photo(photo=photo,
                                       caption=text,
                                       reply_markup=reply_markup)
        else:
            text, reply_markup = inline_get_prize_start()
            await message.answer(text=text,
                                 reply_markup=reply_markup,
                                 parse_mode="HTML",
                                 disable_web_page_preview=True
                                 )

        if await participate_in_lottery(chat_id=message.chat.id):
            text, reply_markup = inline_lottery_start(check=True)
            await message.answer(text=text,
                                 reply_markup=reply_markup)
            await message.answer(text=complete_texts[4])
        else:
            text, reply_markup = inline_lottery_start()
            await message.answer(text=text,
                                 reply_markup=reply_markup)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–≤–µ—Å—Ç–∞ –∏–∑–Ω—É—Ç—Ä–∏ (not complete)
@router.message(F.text.lower().contains("–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"),
                StateFilter(User.quest_active),
                ~MTaskFilter("complete"))
async def inform_quest_handler(message: types.Message):
    await message.answer(text="–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–≤–µ—Å—Ç!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–≤–µ—Å—Ç–∞ –∏–∑–Ω—É—Ç—Ä–∏ (complete)
@router.message(F.text.lower().contains("–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"),
                StateFilter(User.quest_active),
                MTaskFilter("complete"))
async def inform_complete_quest_handler(message: types.Message):
    photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/certificate.jpg"))
    await message.answer_photo(photo=photo,
                               caption=complete_texts[0],
                               parse_mode="HTML",
                               disable_web_page_preview=True)

    photo = FSInputFile(os.path.join(BASE_DIR, "bot/media/partners/logos/company_3.jpg"))
    await message.answer_photo(photo=photo,
                               caption=complete_texts[1],
                               parse_mode="HTML",
                               disable_web_page_preview=True)

    if await got_prize(chat_id=message.chat.id):

        await message.answer(text=complete_texts[2],
                             parse_mode="HTML",
                             disable_web_page_preview=True)

        prize_data = await get_prize(chat_id=message.chat.id)

        photo = FSInputFile(
            os.path.join(BASE_DIR, f"bot/media/partners/logos/company_{prize_data.get('company_id')}.jpg"))
        text, reply_markup = inline_prize_data(prize_data=prize_data)
        await message.answer_photo(photo=photo,
                                   caption=text,
                                   reply_markup=reply_markup)

    else:
        text, reply_markup = inline_get_prize_start()
        await message.answer(text=text,
                             reply_markup=reply_markup,
                             parse_mode="HTML",
                             disable_web_page_preview=True)

    if await participate_in_lottery(chat_id=message.chat.id):
        text, reply_markup = inline_lottery_start(check=True)
        await message.answer(text=text,
                             reply_markup=reply_markup)
        await message.answer(text=complete_texts[4])
    else:
        text, reply_markup = inline_lottery_start()
        await message.answer(text=text,
                             reply_markup=reply_markup)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è inactive inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "inactive")
async def callback_inactive_button_handler(callback: types.CallbackQuery):
    await callback.answer()
