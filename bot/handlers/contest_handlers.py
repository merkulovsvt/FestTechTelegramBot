import asyncio

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.keyboards.contest_boards import first_task_process, third_task_admin
from bot.utils.callbacks import Task1Answer, Task3Admin
from bot.utils.config import task1_config, task2_config, task3_config, task4_config, task5_config, task6_config
from bot.utils.filters import MTaskFilter, CTaskFilter
from bot.utils.requests import change_task_type
from bot.utils.states import User

router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(F.text.lower().contains("–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç!"),
                MTaskFilter(""))
async def first_task_start_handler(message: types.Message, state: FSMContext):
    await message.answer(text=task1_config.start_text)
    await state.set_state(User.quest_active)

    await change_task_type(chat_id=message.chat.id, task_type="start_task1")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task1")
                )
async def first_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task1_config.process_text)

        photo = FSInputFile("bot/media/task1/pic_1.jpg")
        text, reply_markup = first_task_process(question_id=1)

        await message.answer_photo(photo=photo,
                                   reply_markup=reply_markup)

        await change_task_type(chat_id=message.chat.id, task_type="do_task1")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.callback_query(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"), Task1Answer.filter(),
                       StateFilter(User.quest_active),
                       CTaskFilter("do_task1"))
async def first_task_process_handler(callback: types.CallbackQuery, state: FSMContext, callback_data: Task1Answer):
    question_id = callback_data.question_id
    answer_id = callback_data.answer_id

    if question_id == answer_id and question_id < 4:
        photo = FSInputFile(f"bot/media/task1/pic_{question_id + 1}.jpg")

        _, reply_markup = first_task_process(question_id=question_id,
                                             correct_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)

        text, reply_markup = first_task_process(question_id=question_id + 1)

        await asyncio.sleep(0.05)

        await callback.message.edit_media(media=types.InputMediaPhoto(media=photo),
                                          reply_markup=reply_markup)

    elif question_id == answer_id and question_id == 4:

        _, reply_markup = first_task_process(question_id=question_id,
                                             correct_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)

        # await callback.message.answer(text=task1_config.end_text)
        await callback.message.answer(text="–í—Å—ë –≤–µ—Ä–Ω–æ!")  # –ù–∞–¥–æ –ª–∏

        await callback.message.answer(text=task2_config.start_text)
        await change_task_type(chat_id=callback.message.chat.id, task_type="start_task2")

    else:
        text, reply_markup = first_task_process(question_id=question_id,
                                                wrong_answer_id=answer_id)

        await callback.message.edit_reply_markup(reply_markup=reply_markup)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task2"))
async def second_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task2_config.process_text,
                             parse_mode="HTML",
                             disable_web_page_preview=True)

        await change_task_type(chat_id=message.chat.id, task_type="do_task2")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task2"))
async def second_task_process_handler(message: types.Message, state: FSMContext):
    if message.text.lower() in ("vert dider", "vertdider"):
        await message.answer(text=task2_config.end_text)

        # –°—Ç–∞—Ä—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task3_config.start_text)
        await change_task_type(chat_id=message.chat.id, task_type="start_task3")

    else:
        await message.answer(text="–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ø—Ä–æ–≤–µ—Ä—å –æ–ø–µ—á–∞—Ç–∫–∏")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task3"))
async def third_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task3_config.process_text)
        await change_task_type(chat_id=message.chat.id, task_type="do_task3")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ñ–æ—Ç–æ)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task3"), F.photo)
async def third_task_photo_process_handler(message: types.Message):
    file_id = message.photo[-1].file_id

    reply_markup = third_task_admin(chat_id=message.chat.id)

    await message.bot.send_photo(chat_id=490082094,
                                 photo=file_id,
                                 caption=f"{message.from_user.username}",
                                 reply_markup=reply_markup)

    await message.answer(text="–ñ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–µ —Ñ–æ—Ç–æ)
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task3"), ~F.photo)
async def third_task_not_photo_process_handler(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ üòû")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@router.callback_query(Task3Admin.filter())
async def third_task_photo_process_handler(callback: types.CallbackQuery, callback_data: Task3Admin):
    chat_id = callback_data.chat_id
    approved = callback_data.approved

    if approved:
        await callback.bot.send_message(chat_id=chat_id, text=task3_config.end_text)

        await change_task_type(chat_id=chat_id, task_type="start_task4")
        # –°—Ç–∞—Ä—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await callback.bot.send_message(chat_id=chat_id, text=task4_config.start_text)
    else:
        await callback.bot.send_message(chat_id=chat_id, text="–§–æ—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task4"))
async def fourth_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task4_config.process_text)
        await message.answer(text="""
        –ò —Å–ª–µ–¥–æ–º –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:
        –ì–¥–µ –±—ã–ª –õ–µ–≤ –õ–∞–Ω–¥–∞—É –≤–æ –≤—Ä–µ–º—è –µ–∂–æ–≤—â–∏–Ω—ã?""")
        await message.answer(text="–ò —Å–∞–º–æ–µ –∑–∞–Ω—è—Ç–Ω–æ–µ: –Ω–∞ —ç—Ç–∏ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –û–î–ò–ù –æ—Ç–≤–µ—Ç. –í–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ")
        await change_task_type(chat_id=message.chat.id, task_type="do_task4")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task4"))
async def fourth_task_process_handler(message: types.Message, state: FSMContext):
    if "–æ–ø–∞–ª" in message.text.lower():
        await message.answer(text=task4_config.end_text)

        # –°—Ç–∞—Ä—Ç –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task5_config.start_text)
        await change_task_type(chat_id=message.chat.id, task_type="start_task5")
    else:
        await message.answer(text="–î–∞–≤–∞–π –µ—â—ë –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task5"))
async def fifth_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task5_config.process_text)
        await change_task_type(chat_id=message.chat.id, task_type="do_task5")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—è—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("do_task5"))
async def fifth_task_process_handler(message: types.Message, state: FSMContext):
    if message.text == 33:
        await message.answer(text=task5_config.end_text)

        # –°—Ç–∞—Ä—Ç —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await message.answer(text=task6_config.start_text)
        await change_task_type(chat_id=message.chat.id, task_type="start_task6")
    else:
        await message.answer(
            text="–ö–∞–∂–µ—Ç—Å—è, –Ω—É–∂–Ω–∞ –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ (–º—ã –Ω–µ —É–∑–Ω–∞–µ–º, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º)")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —à–µ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(~F.text.lower().contains("—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞"),
                StateFilter(User.quest_active),
                MTaskFilter("start_task6"))
async def fifth_task_conditions_handler(message: types.Message, state: FSMContext):
    if message.text.lower() == "–∫–æ–¥":
        await message.answer(text="–£—Ä–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")

        await message.answer(text=task6_config.process_text)
        await change_task_type(chat_id=message.chat.id, task_type="do_task6")
    else:
        await message.answer(text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
